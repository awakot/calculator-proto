// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/proto/calculator.proto

package calculatorproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SumReq struct {
	FirstNum             int32    `protobuf:"varint,1,opt,name=first_num,json=firstNum,proto3" json:"first_num,omitempty"`
	SecondNum            int32    `protobuf:"varint,2,opt,name=second_num,json=secondNum,proto3" json:"second_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumReq) Reset()         { *m = SumReq{} }
func (m *SumReq) String() string { return proto.CompactTextString(m) }
func (*SumReq) ProtoMessage()    {}
func (*SumReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{0}
}

func (m *SumReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumReq.Unmarshal(m, b)
}
func (m *SumReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumReq.Marshal(b, m, deterministic)
}
func (m *SumReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumReq.Merge(m, src)
}
func (m *SumReq) XXX_Size() int {
	return xxx_messageInfo_SumReq.Size(m)
}
func (m *SumReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SumReq.DiscardUnknown(m)
}

var xxx_messageInfo_SumReq proto.InternalMessageInfo

func (m *SumReq) GetFirstNum() int32 {
	if m != nil {
		return m.FirstNum
	}
	return 0
}

func (m *SumReq) GetSecondNum() int32 {
	if m != nil {
		return m.SecondNum
	}
	return 0
}

type SumRes struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRes) Reset()         { *m = SumRes{} }
func (m *SumRes) String() string { return proto.CompactTextString(m) }
func (*SumRes) ProtoMessage()    {}
func (*SumRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{1}
}

func (m *SumRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRes.Unmarshal(m, b)
}
func (m *SumRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRes.Marshal(b, m, deterministic)
}
func (m *SumRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRes.Merge(m, src)
}
func (m *SumRes) XXX_Size() int {
	return xxx_messageInfo_SumRes.Size(m)
}
func (m *SumRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRes.DiscardUnknown(m)
}

var xxx_messageInfo_SumRes proto.InternalMessageInfo

func (m *SumRes) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ComputeAvarageReq struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAvarageReq) Reset()         { *m = ComputeAvarageReq{} }
func (m *ComputeAvarageReq) String() string { return proto.CompactTextString(m) }
func (*ComputeAvarageReq) ProtoMessage()    {}
func (*ComputeAvarageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{2}
}

func (m *ComputeAvarageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAvarageReq.Unmarshal(m, b)
}
func (m *ComputeAvarageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAvarageReq.Marshal(b, m, deterministic)
}
func (m *ComputeAvarageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAvarageReq.Merge(m, src)
}
func (m *ComputeAvarageReq) XXX_Size() int {
	return xxx_messageInfo_ComputeAvarageReq.Size(m)
}
func (m *ComputeAvarageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAvarageReq.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAvarageReq proto.InternalMessageInfo

func (m *ComputeAvarageReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type ComputeAvarageRes struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeAvarageRes) Reset()         { *m = ComputeAvarageRes{} }
func (m *ComputeAvarageRes) String() string { return proto.CompactTextString(m) }
func (*ComputeAvarageRes) ProtoMessage()    {}
func (*ComputeAvarageRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{3}
}

func (m *ComputeAvarageRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComputeAvarageRes.Unmarshal(m, b)
}
func (m *ComputeAvarageRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComputeAvarageRes.Marshal(b, m, deterministic)
}
func (m *ComputeAvarageRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeAvarageRes.Merge(m, src)
}
func (m *ComputeAvarageRes) XXX_Size() int {
	return xxx_messageInfo_ComputeAvarageRes.Size(m)
}
func (m *ComputeAvarageRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeAvarageRes.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeAvarageRes proto.InternalMessageInfo

func (m *ComputeAvarageRes) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type FindMaximumRequest struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumRequest) Reset()         { *m = FindMaximumRequest{} }
func (m *FindMaximumRequest) String() string { return proto.CompactTextString(m) }
func (*FindMaximumRequest) ProtoMessage()    {}
func (*FindMaximumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{4}
}

func (m *FindMaximumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumRequest.Unmarshal(m, b)
}
func (m *FindMaximumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumRequest.Marshal(b, m, deterministic)
}
func (m *FindMaximumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumRequest.Merge(m, src)
}
func (m *FindMaximumRequest) XXX_Size() int {
	return xxx_messageInfo_FindMaximumRequest.Size(m)
}
func (m *FindMaximumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumRequest proto.InternalMessageInfo

func (m *FindMaximumRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FindMaximumResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindMaximumResponse) Reset()         { *m = FindMaximumResponse{} }
func (m *FindMaximumResponse) String() string { return proto.CompactTextString(m) }
func (*FindMaximumResponse) ProtoMessage()    {}
func (*FindMaximumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{5}
}

func (m *FindMaximumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindMaximumResponse.Unmarshal(m, b)
}
func (m *FindMaximumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindMaximumResponse.Marshal(b, m, deterministic)
}
func (m *FindMaximumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMaximumResponse.Merge(m, src)
}
func (m *FindMaximumResponse) XXX_Size() int {
	return xxx_messageInfo_FindMaximumResponse.Size(m)
}
func (m *FindMaximumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMaximumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMaximumResponse proto.InternalMessageInfo

func (m *FindMaximumResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SquareRootRequest struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootRequest) Reset()         { *m = SquareRootRequest{} }
func (m *SquareRootRequest) String() string { return proto.CompactTextString(m) }
func (*SquareRootRequest) ProtoMessage()    {}
func (*SquareRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{6}
}

func (m *SquareRootRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootRequest.Unmarshal(m, b)
}
func (m *SquareRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootRequest.Marshal(b, m, deterministic)
}
func (m *SquareRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootRequest.Merge(m, src)
}
func (m *SquareRootRequest) XXX_Size() int {
	return xxx_messageInfo_SquareRootRequest.Size(m)
}
func (m *SquareRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootRequest proto.InternalMessageInfo

func (m *SquareRootRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type SquareRootResponse struct {
	NumRoot              float64  `protobuf:"fixed64,1,opt,name=num_root,json=numRoot,proto3" json:"num_root,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SquareRootResponse) Reset()         { *m = SquareRootResponse{} }
func (m *SquareRootResponse) String() string { return proto.CompactTextString(m) }
func (*SquareRootResponse) ProtoMessage()    {}
func (*SquareRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d2a7eb5a895a616, []int{7}
}

func (m *SquareRootResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SquareRootResponse.Unmarshal(m, b)
}
func (m *SquareRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SquareRootResponse.Marshal(b, m, deterministic)
}
func (m *SquareRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SquareRootResponse.Merge(m, src)
}
func (m *SquareRootResponse) XXX_Size() int {
	return xxx_messageInfo_SquareRootResponse.Size(m)
}
func (m *SquareRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SquareRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SquareRootResponse proto.InternalMessageInfo

func (m *SquareRootResponse) GetNumRoot() float64 {
	if m != nil {
		return m.NumRoot
	}
	return 0
}

func init() {
	proto.RegisterType((*SumReq)(nil), "calculator.SumReq")
	proto.RegisterType((*SumRes)(nil), "calculator.SumRes")
	proto.RegisterType((*ComputeAvarageReq)(nil), "calculator.ComputeAvarageReq")
	proto.RegisterType((*ComputeAvarageRes)(nil), "calculator.ComputeAvarageRes")
	proto.RegisterType((*FindMaximumRequest)(nil), "calculator.FindMaximumRequest")
	proto.RegisterType((*FindMaximumResponse)(nil), "calculator.FindMaximumResponse")
	proto.RegisterType((*SquareRootRequest)(nil), "calculator.SquareRootRequest")
	proto.RegisterType((*SquareRootResponse)(nil), "calculator.SquareRootResponse")
}

func init() { proto.RegisterFile("calculator/proto/calculator.proto", fileDescriptor_3d2a7eb5a895a616) }

var fileDescriptor_3d2a7eb5a895a616 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x29, 0x0d, 0x08, 0x63, 0xa2, 0x32, 0x26, 0x46, 0x6b, 0x40, 0x6c, 0xa2, 0x21, 0x31,
	0x52, 0xa3, 0x9f, 0xc0, 0x3f, 0xf1, 0x06, 0x87, 0xd6, 0x93, 0x17, 0x52, 0xcb, 0x6a, 0x9a, 0xb0,
	0x5d, 0xd8, 0xdd, 0x21, 0x7e, 0x39, 0xbf, 0x9b, 0xe9, 0xb6, 0xd8, 0x42, 0xc1, 0x53, 0xdb, 0xf7,
	0x5e, 0x7f, 0x3b, 0x7d, 0x53, 0xb8, 0x8c, 0xc2, 0x59, 0x44, 0xb3, 0x50, 0x0b, 0xe9, 0xcd, 0xa5,
	0xd0, 0xc2, 0x2b, 0x84, 0xa1, 0x11, 0x10, 0x0a, 0xc5, 0x7d, 0x81, 0x66, 0x40, 0xdc, 0x67, 0x0b,
	0x3c, 0x87, 0xf6, 0x67, 0x2c, 0x95, 0x9e, 0x24, 0xc4, 0x4f, 0xad, 0xbe, 0x35, 0x68, 0xf8, 0x2d,
	0x23, 0x8c, 0x89, 0x63, 0x17, 0x40, 0xb1, 0x48, 0x24, 0x53, 0xe3, 0xd6, 0x8d, 0xdb, 0xce, 0x94,
	0x31, 0x71, 0xb7, 0x9f, 0x53, 0x14, 0x9e, 0x40, 0x53, 0x32, 0x45, 0x33, 0x9d, 0x23, 0xf2, 0x27,
	0xf7, 0x0a, 0x3a, 0xcf, 0x82, 0xcf, 0x49, 0xb3, 0xc7, 0x65, 0x28, 0xc3, 0x2f, 0x96, 0x1e, 0x79,
	0x04, 0xf6, 0xea, 0x30, 0xdb, 0x4f, 0x6f, 0xdd, 0x9b, 0x6a, 0x6c, 0x93, 0x69, 0xfd, 0x31, 0xaf,
	0x01, 0x5f, 0xe3, 0x64, 0x3a, 0x0a, 0xbf, 0x63, 0x6e, 0xbe, 0x81, 0x98, 0xd2, 0x5b, 0xa0, 0xb7,
	0x70, 0xbc, 0x96, 0x53, 0x73, 0x91, 0x28, 0xb6, 0x81, 0xb5, 0xcb, 0xa3, 0x06, 0x0b, 0x0a, 0x25,
	0xf3, 0x85, 0xd0, 0x5b, 0xa8, 0x8d, 0x8c, 0xea, 0x01, 0x96, 0x63, 0x39, 0xf4, 0x0c, 0x5a, 0x09,
	0xf1, 0x89, 0x14, 0x62, 0x35, 0xed, 0x5e, 0x42, 0x3c, 0x8d, 0xdc, 0xff, 0xd4, 0xa1, 0x53, 0x34,
	0x1f, 0x30, 0xb9, 0x8c, 0x23, 0x86, 0x1e, 0xd8, 0x01, 0x71, 0xc4, 0x61, 0x69, 0x4d, 0xd9, 0x46,
	0x9c, 0xaa, 0xa6, 0xdc, 0x1a, 0xfa, 0x70, 0xb0, 0x5e, 0x11, 0x76, 0xcb, 0xb9, 0x4a, 0xcb, 0xce,
	0xbf, 0xb6, 0x72, 0x6b, 0x03, 0x0b, 0xdf, 0x60, 0xbf, 0xd4, 0x10, 0xf6, 0xca, 0x6f, 0x54, 0x2b,
	0x76, 0x2e, 0x76, 0xfa, 0x59, 0x0b, 0x29, 0xf3, 0xce, 0xc2, 0x11, 0x40, 0xd1, 0xd0, 0xfa, 0x94,
	0x95, 0x82, 0x9d, 0xde, 0x2e, 0x7b, 0x85, 0x7c, 0xea, 0xbc, 0x1f, 0x16, 0x11, 0xf3, 0x27, 0x7f,
	0x34, 0xcd, 0xe5, 0xe1, 0x37, 0x00, 0x00, 0xff, 0xff, 0x05, 0xad, 0x14, 0x41, 0xf5, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumRes, error)
	// Client Streaming
	ComputeAvarage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvarageClient, error)
	// BiDi Streaming
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error)
	SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error)
}

type calculatorServiceClient struct {
	cc *grpc.ClientConn
}

func NewCalculatorServiceClient(cc *grpc.ClientConn) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumRes, error) {
	out := new(SumRes)
	err := c.cc.Invoke(ctx, "/calculator.calculatorService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) ComputeAvarage(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvarageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[0], "/calculator.calculatorService/ComputeAvarage", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeAvarageClient{stream}
	return x, nil
}

type CalculatorService_ComputeAvarageClient interface {
	Send(*ComputeAvarageReq) error
	CloseAndRecv() (*ComputeAvarageRes, error)
	grpc.ClientStream
}

type calculatorServiceComputeAvarageClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeAvarageClient) Send(m *ComputeAvarageReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvarageClient) CloseAndRecv() (*ComputeAvarageRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAvarageRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_FindMaximumClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CalculatorService_serviceDesc.Streams[1], "/calculator.calculatorService/FindMaximum", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceFindMaximumClient{stream}
	return x, nil
}

type CalculatorService_FindMaximumClient interface {
	Send(*FindMaximumRequest) error
	Recv() (*FindMaximumResponse, error)
	grpc.ClientStream
}

type calculatorServiceFindMaximumClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceFindMaximumClient) Send(m *FindMaximumRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumClient) Recv() (*FindMaximumResponse, error) {
	m := new(FindMaximumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) SquareRoot(ctx context.Context, in *SquareRootRequest, opts ...grpc.CallOption) (*SquareRootResponse, error) {
	out := new(SquareRootResponse)
	err := c.cc.Invoke(ctx, "/calculator.calculatorService/SquareRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
type CalculatorServiceServer interface {
	Sum(context.Context, *SumReq) (*SumRes, error)
	// Client Streaming
	ComputeAvarage(CalculatorService_ComputeAvarageServer) error
	// BiDi Streaming
	FindMaximum(CalculatorService_FindMaximumServer) error
	SquareRoot(context.Context, *SquareRootRequest) (*SquareRootResponse, error)
}

// UnimplementedCalculatorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (*UnimplementedCalculatorServiceServer) Sum(ctx context.Context, req *SumReq) (*SumRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (*UnimplementedCalculatorServiceServer) ComputeAvarage(srv CalculatorService_ComputeAvarageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAvarage not implemented")
}
func (*UnimplementedCalculatorServiceServer) FindMaximum(srv CalculatorService_FindMaximumServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}
func (*UnimplementedCalculatorServiceServer) SquareRoot(ctx context.Context, req *SquareRootRequest) (*SquareRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}

func RegisterCalculatorServiceServer(s *grpc.Server, srv CalculatorServiceServer) {
	s.RegisterService(&_CalculatorService_serviceDesc, srv)
}

func _CalculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.calculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Sum(ctx, req.(*SumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_ComputeAvarage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeAvarage(&calculatorServiceComputeAvarageServer{stream})
}

type CalculatorService_ComputeAvarageServer interface {
	SendAndClose(*ComputeAvarageRes) error
	Recv() (*ComputeAvarageReq, error)
	grpc.ServerStream
}

type calculatorServiceComputeAvarageServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeAvarageServer) SendAndClose(m *ComputeAvarageRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvarageServer) Recv() (*ComputeAvarageReq, error) {
	m := new(ComputeAvarageReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).FindMaximum(&calculatorServiceFindMaximumServer{stream})
}

type CalculatorService_FindMaximumServer interface {
	Send(*FindMaximumResponse) error
	Recv() (*FindMaximumRequest, error)
	grpc.ServerStream
}

type calculatorServiceFindMaximumServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceFindMaximumServer) Send(m *FindMaximumResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceFindMaximumServer) Recv() (*FindMaximumRequest, error) {
	m := new(FindMaximumRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SquareRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.calculatorService/SquareRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).SquareRoot(ctx, req.(*SquareRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalculatorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.calculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalculatorService_Sum_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _CalculatorService_SquareRoot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputeAvarage",
			Handler:       _CalculatorService_ComputeAvarage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaximum",
			Handler:       _CalculatorService_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/proto/calculator.proto",
}
